- name: Backup etcd Servers - Create local backup structure
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
  loop:
    - "{{ CONTROLLER_BACKUP }}"
  delegate_to: localhost
  vars:
    ansible_connection: ssh
    ansible_user: "{{ ansible_ssh_user }}"

- name: Backup etcd Servers - Create remote backup structure
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ BACKUPDIR }}"

- name: Get the Endpoints
  shell: grep https "{{ ETCD_POD_MANIFEST }}" | cut -d '/' -f3
  register: ETCD_EP

- debug:
    var: ETCD_EP

- name: Check OC login (whoami)
  shell: oc whoami
  register: oc_whoami
  changed_when: false
  failed_when: "OCUSER not in oc_whoami.stdout_lines or oc_whoami.rc != 0"

- name: Get the ETCDs PODS
  shell: oc get pods -n "{{ OCPROJECT }}" | grep -o '\S*etcd\S*'
  register: ETCD_POD

- debug:
    var: ETCD_POD

- name: Execute and save the Snapshot
  shell: "oc -n kube-system exec {{ item }} -c etcd -- /bin/bash -c 'ETCDCTL_API=3 etcdctl --cert {{ CERT }} --key {{ KEY }} --cacert {{ CACERT }} --endpoints {{ ETCD_EP.stdout }} snapshot save /var/lib/etcd/snapshot.db'"
  loop: "{{ ETCD_POD.stdout_lines }}"
  when: "ansible_hostname in item"

- name: Backup etcd Servers - Copy Origin Files
  archive:
    path:
    - /var/lib/etcd/snapshot.db
    - /etc/etcd
    dest: "{{ BACKUPDIR }}/etcd.tgz"

- name: Fetch etcd archive
  fetch:
    src: "{{ BACKUPDIR }}/etcd.tgz"
    dest: "{{ CONTROLLER_BACKUP }}/"
